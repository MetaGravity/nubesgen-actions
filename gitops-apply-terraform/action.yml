name: 'Apply Terraform configuration'
description: 'Create or update the Azure infrastructure using Terraform'
inputs:
  azure_credentials:
    description: 'Azure Credentials, stored in a secret on your GitHub repository, generated by https://github.com/microsoft/NubesGen/blob/main/docs/gitops-quick-start.md'
    required: true
  tf_storage_account:
    description: 'Terraform storage account name, stored in a secret on your GitHub repository, generated by https://github.com/microsoft/NubesGen/blob/main/docs/gitops-quick-start.md'
    required: true
  resource_group_name:
    description: 'Name of the Azure resource group, that will be used to store the Terraform storage account.'
    required: false
    default: 'rg-terraform-001'
outputs: 
  application_name:
    description: 'Name of the application'
    value: ${{ steps.terraform-output.outputs.application_name }}    
  application_url: 
    description: 'URL of the application'
    value: ${{ steps.terraform-output.outputs.application_url }}    
  resource_group: 
    description: 'Resource group name where the resources has been deployed'
    value: ${{ steps.terraform-output.outputs.resource_group }}    
  container_registry_name: 
    description: 'The Container registry name that have has deployed'
    value: ${{ steps.terraform-output.outputs.container_registry_name }}    
  spring_cloud_service_name: 
    description: 'Azure Spring Cloud service name'
    value: ${{ steps.terraform-output.outputs.spring_cloud_service_name }}    
runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set environment variables
      env:
        AZURE_CREDENTIALS: ${{ inputs.azure_credentials }}
      run: |
        TAG_NAME=${GITHUB_REF#refs/*/}
        echo "ENVIRONMENT=${TAG_NAME:4}" >> $GITHUB_ENV
        echo "ARM_CLIENT_ID=$(echo $AZURE_CREDENTIALS | jq -r .clientId)" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=$(echo $AZURE_CREDENTIALS | jq -r .subscriptionId)" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=$(echo $AZURE_CREDENTIALS | jq -r .tenantId)" >> $GITHUB_ENV
      shell: bash
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false
    - name: Initialize Terraform
      env:
        AZURE_CREDENTIALS: ${{ inputs.azure_credentials }}
        TF_STORAGE_ACCOUNT: ${{ inputs.tf_storage_account }}
      run: |
        export ARM_CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
        terraform init \
        -input=false \
        -backend-config="resource_group_name=${{ inputs.resource_group_name }}" \
        -backend-config="storage_account_name=$TF_STORAGE_ACCOUNT" \
        -backend-config="container_name=tfstate" \
        -backend-config="key=$ENVIRONMENT.terraform.tfstate"
      shell: bash
      working-directory: '${{ github.workspace }}/terraform'
    - name: Apply Terraform
      env:
        AZURE_CREDENTIALS: ${{ inputs.azure_credentials }}
        TF_STORAGE_ACCOUNT: ${{ inputs.tf_storage_account }}
      run: |
        export ARM_CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
        terraform apply \
        -input=false \
        -auto-approve \
        -var="terraform_storage_account=$TF_STORAGE_ACCOUNT" \
        -var="environment=$ENVIRONMENT"
      shell: bash
      working-directory: '${{ github.workspace }}/terraform'
    - name: Get output data from Terraform
      id: terraform-output
      env:
        AZURE_CREDENTIALS: ${{ inputs.azure_credentials }}
      run: |
        export ARM_CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
        echo $(terraform output -json) > terraform-output.json
        echo "::set-output name=application_name::$(jq -r .application_name.value terraform-output.json)" 
        echo "::set-output name=application_url::$(jq -r .application_url.value terraform-output.json)" 
        echo "::set-output name=resource_group::$(jq -r .resource_group.value terraform-output.json)" 
        echo "::set-output name=container_registry_name::$(jq -r .container_registry_name.value terraform-output.json)" 
        echo "::set-output name=spring_cloud_service_name::$(jq -r .spring_cloud_service_name.value terraform-output.json)" 
      working-directory: '${{ github.workspace }}/terraform'
      shell: bash